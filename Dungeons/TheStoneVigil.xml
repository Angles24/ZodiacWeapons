<?xml version="1.0" encoding="utf-8"?>
<!--
  Profile: The Stone Vigil
  Authors: Zamphire
  Code Credit: TuckMeIntoBread, Kayla.
-->

<!DOCTYPE Profile [
<!-- Profile Settings -->
<!ENTITY openchest "0">
]>
<Profile>
  <Name>The Stone Vigil</Name>
  <BehaviorDirectory></BehaviorDirectory>
  <Order>
 	<If Condition="not IsOnMap(168)">
		<RunCode Name="QueueStoneVigil"/>
	</If>
	<If Condition="IsOnMap(168)">
		<!-- Secure the barbican 0/1 -->
		<If Condition="GetInstanceTodo(0) == 0">
			<Log Message="Secure the barbican 0/1" />
			<MoveTo XYZ="-0.3656647, 4.000783, 140.366"/> <!-- Move to first boss room -->				
			<MoveTo XYZ="0.1582589, 0.1118119, 126.7698" usemesh="false"/> <!-- Move to first boss room -->		
			<Grind GrindRef="Chudo" While="GameObjectManager.GetObjectByNPCId(1677)"/> <!-- Fight Chudo-Yudo -->
			<If Condition="&openchest; == 1">
				<RunCode name="OpenChest" />
			</If>			
		</If>
		<!-- Retake the right brattice 0/1 -->
		<If Condition="GetInstanceTodo(1) == 0">
			<Log Message="Retake the right brattice 0/1" />
			<MoveTo XYZ="25.42299, 3.954224, -79.95275"/> <!-- Move to second boss room -->					
			<Grind GrindRef="Koshchei" While="GameObjectManager.GetObjectByNPCId(1678)"/> <!-- Fight Koshchei -->
			<If Condition="&openchest; == 1">
				<RunCode name="OpenChest" />
			</If>			
		</If>
		<!-- Defeat Isgebind 0/1 -->
		<If Condition="GetInstanceTodo(2) == 0">
			<Log Message="Defeat Isgebind 0/1" />
			<MoveTo XYZ="-0.2418478, 4, -217.653"/> <!-- Move to Strongroom Gate -->
			<RunCode name="StrongroomGate"/>
			<MoveTo XYZ="-0.0006421171, 0.04041038, -241.1199" usemesh="false"/> <!-- Move into final boss room -->
			<Grind GrindRef="Isgebind" While="GameObjectManager.GetObjectByNPCId(1680)"/> <!-- Fight Isgebind -->
			<If Condition="&openchest; == 1">
				<RunCode name="OpenChest" />
			</If>
			<MoveTo XYZ="0.004403681,0.07694488,-268.7161"/> <!-- Move to Exit -->			
			<RunCode name="ExitDuty"/>
			<LLoadProfile Path="../Start.xml"/>
		</If>		
	</If>	
  </Order>
  <GrindAreas>
	<GrindArea name="Chudo">
        <Hotspots>
			<Hotspot Radius="200" XYZ="0,0.01273669,107.1766" />
        </Hotspots>
        <TargetMobs>
			<TargetMob Name="Chudo-Yudo" Id="1677" Weight="1" />	
        </TargetMobs>
	</GrindArea>
	<GrindArea name="Koshchei">
        <Hotspots>
			<Hotspot Radius="200" XYZ="54.67297,5.022033,-79.94208" />
        </Hotspots>
        <TargetMobs>
			<TargetMob Name="Koshchei" Id="1678" Weight="1" />	
        </TargetMobs>
	</GrindArea>
	<GrindArea name="Isgebind">
        <Hotspots>
			<Hotspot Radius="200" XYZ="-0.01531982,0.05585395,-262.7756" />
        </Hotspots>
        <TargetMobs>
			<TargetMob Name="Isgebind" Id="1680" Weight="1" />	
        </TargetMobs>
	</GrindArea>	
  </GrindAreas>		
  <CodeChunks>
  	<CodeChunk Name="StrongroomGate">
		  <![CDATA[
			ff14bot.Managers.GameObjectManager.GetObjectByNPCId(2001880).Interact();
			await Coroutine.Sleep(3000);
		  ]]>	 	  
	</CodeChunk>
	<CodeChunk Name="ExitDuty">
		<![CDATA[
			ff14bot.Managers.GameObjectManager.GetObjectByNPCId(2001880).Interact();
			await Coroutine.Sleep(1000);
			ff14bot.RemoteWindows.SelectYesno.ClickYes();
			await Coroutine.Sleep(3000);
      ]]>
	</CodeChunk>
	<CodeChunk name="OpenChest">
		<![CDATA[    
		if (GameObjectManager.GetObjectsOfType<Treasure>().Where(r => r.Distance() < 50 && (r.Name == "Treasure Coffer" || r.Name == "treasure coffer")).Any())
		{
			var _chest = GameObjectManager.GetObjectsOfType<Treasure>().Where(r => r.Distance() < 50 && (r.Name == "宝箱" || r.Name == "Treasure Coffer" || r.Name == "treasure coffer")).FirstOrDefault();
			while (Core.Me.Distance(_chest.Location) > 1)
			{
			await CommonTasks.MoveTo(_chest.Location);
			await Coroutine.Yield();
			}
			
			Navigator.PlayerMover.MoveStop();
			await Coroutine.Sleep(1000);
			Poi.Current = new Poi(_chest, PoiType.Kill);
			Poi.Current.Unit.Interact();                    
			await Coroutine.Sleep(1000);        
		}
		]]>
	</CodeChunk>	
	<CodeChunk Name="QueueStoneVigil">
		<![CDATA[ 
           Logging.WriteDiagnostic("Queuing for Dungeon");
		GameSettingsManager.JoinWithUndersizedParty = true;
           DutyManager.Queue(DataManager.InstanceContentResults[11]);
           await Coroutine.Wait(5000, () => (DutyManager.QueueState == QueueState.InQueue || DutyManager.QueueState == QueueState.JoiningInstance));

           Logging.WriteDiagnostic("Queued for Dungeon");

           await Coroutine.Wait(10000, () => (DutyManager.QueueState == QueueState.JoiningInstance));
			
           await Coroutine.Wait(10000, () => (RaptureAtkUnitManager.GetWindowByName("ContentsFinderConfirm") != null));

           Logging.WriteDiagnostic("Commencing");
           DutyManager.Commence();
           Logging.WriteDiagnostic("Waiting for Loading");
           await Coroutine.Wait(10000, () => CommonBehaviors.IsLoading || QuestLogManager.InCutscene);
			
           if (CommonBehaviors.IsLoading)
           {
               await Coroutine.Wait(-1, () => !CommonBehaviors.IsLoading);
           }

           if (QuestLogManager.InCutscene)
           {
               TreeRoot.StatusText = "InCutscene";
               if (ff14bot.RemoteAgents.AgentCutScene.Instance != null)
               {
                   ff14bot.RemoteAgents.AgentCutScene.Instance.PromptSkip();
                   await Coroutine.Wait(250, () => SelectString.IsOpen);
                   if (SelectString.IsOpen)
                       SelectString.ClickSlot(0);
               }
           }

           Logging.WriteDiagnostic("Should be in duty");
		   
           var director = ((ff14bot.Directors.InstanceContentDirector) DirectorManager.ActiveDirector);
           if (director !=null)
		   {
               if (director.TimeLeftInDungeon >= new TimeSpan(1,30,0))
               {
				   Logging.WriteDiagnostic("Barrier up");
                   await Coroutine.Wait(30000, () => director.TimeLeftInDungeon < new TimeSpan(1,29,58));
               }
		   }
		   else
		   {
			Logging.WriteDiagnostic("Director is null");
		   }
			   
	      Logging.WriteDiagnostic("Should be ready");
		]]>
	</CodeChunk>	
  </CodeChunks>  
</Profile>  