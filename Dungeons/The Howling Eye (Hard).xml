<?xml version="1.0" encoding="utf-8"?>
<!--
  Profile: The Howling Eye (Hard)
  Authors: Zamphire
  Code Credit: TuckMeIntoBread, Kayla.
-->

<!DOCTYPE Profile [
<!-- Profile Settings -->
<!ENTITY openchest "0">
]>

<Profile>
  <Name>The Howling Eye (Hard)</Name>
  <BehaviorDirectory></BehaviorDirectory>
  <Order>
 	<If Condition="not IsOnMap(294)">
		<RunCode Name="QueueGarudaHard"/>
	</If>
	<If Condition="IsOnMap(294)">
		<Grind GrindRef="Garuda" While="GameObjectManager.GetObjectByNPCId(1644).CurrentHealth == 0"/> <!-- Kill Garuda -->
		<If Condition="&openchest; == 1">
			<RunCode name="OpenChest" />
		</If>
		<MoveTo XYZ="1.078937,-2.041544,-18.36319"/> <!-- Move to Exit -->
		<RunCode name="ExitDuty"/>
		<WaitTimer WaitTime="10"/>
		<LLoadProfile Path="../Start.xml"/>
	</If>  
 </Order>
  <GrindAreas>
	<GrindArea name="Garuda">
        <Hotspots>
			<Hotspot Radius="200" XYZ="1.1442,-2.033097,-18" />
        </Hotspots>
        <TargetMobs>
			<TargetMob Name="Garuda" Id="1644" Weight="1" />
			<TargetMob Name="Chirada" Id="1646" Weight="2" />
			<TargetMob Name="Suparna" Id="1645" Weight="2" />					
        </TargetMobs>
	</GrindArea>
  </GrindAreas>		
  <CodeChunks>
	<CodeChunk Name="ExitDuty">
		<![CDATA[
			ff14bot.Managers.GameObjectManager.GetObjectByNPCId(2000275).Interact();
			await Coroutine.Sleep(1000);
			ff14bot.RemoteWindows.SelectYesno.ClickYes();
			await Coroutine.Sleep(3000);
      ]]>
	</CodeChunk>		
	<CodeChunk Name="QueueGarudaHard">
		<![CDATA[ 
           Logging.WriteDiagnostic("Queuing for Dungeon");
		GameSettingsManager.JoinWithUndersizedParty = true;
           DutyManager.Queue(DataManager.InstanceContentResults[61]);
           await Coroutine.Wait(5000, () => (DutyManager.QueueState == QueueState.InQueue || DutyManager.QueueState == QueueState.JoiningInstance));

           Logging.WriteDiagnostic("Queued for Dungeon");

           await Coroutine.Wait(10000, () => (DutyManager.QueueState == QueueState.JoiningInstance));
			
           await Coroutine.Wait(10000, () => (RaptureAtkUnitManager.GetWindowByName("ContentsFinderConfirm") != null));

           Logging.WriteDiagnostic("Commencing");
           DutyManager.Commence();
           Logging.WriteDiagnostic("Waiting for Loading");
           await Coroutine.Wait(10000, () => CommonBehaviors.IsLoading || QuestLogManager.InCutscene);
			
           if (CommonBehaviors.IsLoading)
           {
               await Coroutine.Wait(-1, () => !CommonBehaviors.IsLoading);
           }

           if (QuestLogManager.InCutscene)
           {
               TreeRoot.StatusText = "InCutscene";
               if (ff14bot.RemoteAgents.AgentCutScene.Instance != null)
               {
                   ff14bot.RemoteAgents.AgentCutScene.Instance.PromptSkip();
                   await Coroutine.Wait(250, () => SelectString.IsOpen);
                   if (SelectString.IsOpen)
                       SelectString.ClickSlot(0);
               }
           }

           Logging.WriteDiagnostic("Should be in duty");
		   
           var director = ((ff14bot.Directors.InstanceContentDirector) DirectorManager.ActiveDirector);
           if (director !=null)
		   {
               if (director.TimeLeftInDungeon >= new TimeSpan(1,30,0))
               {
				   Logging.WriteDiagnostic("Barrier up");
                   await Coroutine.Wait(30000, () => director.TimeLeftInDungeon < new TimeSpan(1,29,58));
               }
		   }
		   else
		   {
			Logging.WriteDiagnostic("Director is null");
		   }
			   
	      Logging.WriteDiagnostic("Should be ready");
		]]>
	</CodeChunk>
	<CodeChunk name="OpenChest">
		<![CDATA[    
		if (GameObjectManager.GetObjectsOfType<Treasure>().Where(r => r.Distance() < 50 && (r.Name == "Treasure Coffer" || r.Name == "treasure coffer")).Any())
		{
			var _chest = GameObjectManager.GetObjectsOfType<Treasure>().Where(r => r.Distance() < 50 && (r.Name == "宝箱" || r.Name == "Treasure Coffer" || r.Name == "treasure coffer")).FirstOrDefault();
			while (Core.Me.Distance(_chest.Location) > 1)
			{
			await CommonTasks.MoveTo(_chest.Location);
			await Coroutine.Yield();
			}
			
			Navigator.PlayerMover.MoveStop();
			await Coroutine.Sleep(1000);
			Poi.Current = new Poi(_chest, PoiType.Kill);
			Poi.Current.Unit.Interact();                    
			await Coroutine.Sleep(1000);        
		}
		]]>
	</CodeChunk>	
  </CodeChunks>  
</Profile>    